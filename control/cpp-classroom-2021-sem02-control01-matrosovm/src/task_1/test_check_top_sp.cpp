#include "story_points.hpp"

#include <algorithm>
#include <cassert>
#include <stdexcept>

namespace {

int GetStoryPoints(const std::string_view worker_id) {
  int res = std::hash<std::string_view>{}(worker_id) % 50000;
  if (res % 100 < 8) {
    throw std::logic_error("fired worker");
  }
  return res;
}

void CheckGetTopWorkers() {
  std::vector<std::string> workers;
  std::vector<ctrl01::WorkerInfo> workers_info;
  for (int i = 0; i < 1000; i++) {
    const auto name = std::to_string(i);
    workers.push_back(name);
    try {
      workers_info.push_back({name, GetStoryPoints(name)});
    } catch (...) {
    }
  }
  std::sort(workers_info.begin(), workers_info.end());
  {
    const auto res = ctrl01::GetTopWorkers(workers, workers_info, 20);
    const std::vector<std::pair<std::string, int>> ref = {
        {"78", 49949},  {"923", 49944}, {"791", 49922}, {"185", 49854},
        {"216", 49815}, {"763", 49798}, {"512", 49785}, {"973", 49475},
        {"210", 49379}, {"697", 49342}, {"126", 49280}, {"823", 49192},
        {"832", 49175}, {"345", 49174}, {"876", 49113}, {"529", 49092},
        {"495", 48883}, {"220", 48671}, {"780", 48646}, {"619", 48609},
    };
    assert(res == ref);
  }
  {
    const auto res = ctrl01::GetTopWorkers(workers, workers_info, 120);
    const std::vector<std::pair<std::string, int>> ref = {
        {"78", 49949},  {"923", 49944}, {"791", 49922}, {"185", 49854},
        {"216", 49815}, {"763", 49798}, {"512", 49785}, {"973", 49475},
        {"210", 49379}, {"697", 49342}, {"126", 49280}, {"823", 49192},
        {"832", 49175}, {"345", 49174}, {"876", 49113}, {"529", 49092},
        {"495", 48883}, {"220", 48671}, {"780", 48646}, {"619", 48609},
        {"801", 48562}, {"224", 48478}, {"307", 48472}, {"569", 48444},
        {"611", 48368}, {"138", 48355}, {"99", 48312},  {"916", 48252},
        {"511", 48033}, {"506", 47876}, {"15", 47870},  {"432", 47788},
        {"532", 47726}, {"207", 47684}, {"181", 47683}, {"104", 47653},
        {"162", 47646}, {"183", 47475}, {"18", 47454},  {"92", 47424},
        {"793", 47340}, {"23", 47218},  {"270", 47079}, {"237", 46908},
        {"209", 46866}, {"448", 46858}, {"421", 46770}, {"159", 46748},
        {"263", 46719}, {"701", 46713}, {"811", 46689}, {"732", 46616},
        {"503", 46574}, {"411", 46512}, {"851", 46471}, {"401", 46457},
        {"275", 46399}, {"756", 46395}, {"127", 46387}, {"682", 46373},
        {"981", 46322}, {"469", 46317}, {"544", 46231}, {"694", 46209},
        {"389", 46189}, {"510", 46154}, {"877", 46149}, {"533", 46135},
        {"586", 46028}, {"479", 46019}, {"299", 45975}, {"290", 45925},
        {"531", 45790}, {"988", 45735}, {"149", 45657}, {"289", 45528},
        {"652", 45461}, {"208", 45443}, {"480", 45382}, {"977", 45293},
        {"925", 45181}, {"989", 45109}, {"827", 45019}, {"904", 44944},
        {"675", 44846}, {"921", 44845}, {"109", 44796}, {"397", 44669},
        {"131", 44494}, {"922", 44440}, {"188", 44425}, {"674", 44318},
        {"798", 44241}, {"267", 44173}, {"931", 44160}, {"906", 44158},
        {"44", 44049},  {"753", 44036}, {"698", 44028}, {"564", 43998},
        {"684", 43985}, {"884", 43929}, {"708", 43911}, {"891", 43887},
        {"880", 43811}, {"200", 43754}, {"972", 43619}, {"582", 43586},
        {"239", 43537}, {"727", 43522}, {"388", 43515}, {"478", 43384},
        {"241", 43290}, {"846", 43266}, {"29", 43141},  {"19", 43128},
        {"716", 43116}, {"391", 43043}, {"644", 43025}, {"516", 42981},
    };
    assert(res == ref);
  }
}

void CheckEmpty() {
  std::vector<std::string> workers{"Monica", "Rachel", "Chandler"};
  {
    const auto res = ctrl01::GetTopWorkers(workers, {}, 3);
    assert(res.empty());
  }

  {
    std::vector<ctrl01::WorkerInfo> info{{"Joey", -2}, {"Ross", 1000000}};
    const auto res = ctrl01::GetTopWorkers(workers, info, 3);
    assert(res.empty());
  }
}

} // namespace

int main() {
  CheckGetTopWorkers();
  CheckEmpty();
}
